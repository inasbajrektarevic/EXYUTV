// <auto-generated />
using System;
using Iptv.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Iptv.Services.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250228205220_update package entity")]
    partial class updatepackageentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Iptv.Core.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActiveUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("text");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RowId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WebBrowser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Iptv.Core.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "VLC media player"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Smart tv app"
                        });
                });

            modelBuilder.Entity("Iptv.Core.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelLanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Frequency")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHD")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelCategoryId");

                    b.HasIndex("ChannelLanguageId");

                    b.HasIndex("CountryId");

                    b.ToTable("Channels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChannelCategoryId = 1,
                            ChannelLanguageId = 1,
                            ChannelNumber = 1,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Akcijski filmski kanal",
                            Frequency = 101f,
                            IsDeleted = false,
                            IsHD = true,
                            LogoUrl = "",
                            Name = "Action TV",
                            Owner = "Action",
                            StreamUrl = "abcdefgh1234"
                        },
                        new
                        {
                            Id = 2,
                            ChannelCategoryId = 2,
                            ChannelLanguageId = 1,
                            ChannelNumber = 2,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Sportski kanal sa HD prenosima",
                            Frequency = 102f,
                            IsDeleted = false,
                            IsHD = true,
                            LogoUrl = "",
                            Name = "Sport HD",
                            Owner = "Sport Network",
                            StreamUrl = "ijklmnop5678"
                        },
                        new
                        {
                            Id = 3,
                            ChannelCategoryId = 3,
                            ChannelLanguageId = 1,
                            ChannelNumber = 3,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Muzicki kanal sa hitovima",
                            Frequency = 103f,
                            IsDeleted = false,
                            IsHD = false,
                            LogoUrl = "",
                            Name = "Music Hits",
                            Owner = "Music Media",
                            StreamUrl = "qrstuvwx9876"
                        },
                        new
                        {
                            Id = 4,
                            ChannelCategoryId = 4,
                            ChannelLanguageId = 1,
                            ChannelNumber = 4,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Dokumentarni kanal sa zanimljivim sadržajem",
                            Frequency = 104f,
                            IsDeleted = false,
                            IsHD = true,
                            LogoUrl = "",
                            Name = "Discovery World",
                            Owner = "Discovery",
                            StreamUrl = "abc123xyz"
                        },
                        new
                        {
                            Id = 5,
                            ChannelCategoryId = 4,
                            ChannelLanguageId = 1,
                            ChannelNumber = 5,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kanal sa naučnim i dokumentarnim emisijama",
                            Frequency = 105f,
                            IsDeleted = false,
                            IsHD = true,
                            LogoUrl = "",
                            Name = "National Geographic",
                            Owner = "NatGeo",
                            StreamUrl = "def456uvw"
                        },
                        new
                        {
                            Id = 6,
                            ChannelCategoryId = 5,
                            ChannelLanguageId = 1,
                            ChannelNumber = 6,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Dječiji kanal sa crtićima",
                            Frequency = 106f,
                            IsDeleted = false,
                            IsHD = false,
                            LogoUrl = "",
                            Name = "Cartoon Network",
                            Owner = "Warner Bros",
                            StreamUrl = "ghi789rst"
                        },
                        new
                        {
                            Id = 7,
                            ChannelCategoryId = 5,
                            ChannelLanguageId = 1,
                            ChannelNumber = 7,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Dječiji kanal sa popularnim serijama",
                            Frequency = 107f,
                            IsDeleted = false,
                            IsHD = false,
                            LogoUrl = "",
                            Name = "Nickelodeon",
                            Owner = "Nickelodeon",
                            StreamUrl = "jkl012mno"
                        },
                        new
                        {
                            Id = 8,
                            ChannelCategoryId = 6,
                            ChannelLanguageId = 1,
                            ChannelNumber = 8,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Informativni kanal sa svjetskim vijestima",
                            Frequency = 108f,
                            IsDeleted = false,
                            IsHD = true,
                            LogoUrl = "",
                            Name = "CNN",
                            Owner = "CNN Network",
                            StreamUrl = "pqr345stu"
                        },
                        new
                        {
                            Id = 9,
                            ChannelCategoryId = 6,
                            ChannelLanguageId = 1,
                            ChannelNumber = 9,
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Britanski informativni kanal",
                            Frequency = 109f,
                            IsDeleted = false,
                            IsHD = true,
                            LogoUrl = "",
                            Name = "BBC News",
                            Owner = "BBC",
                            StreamUrl = "vwx678yz"
                        });
                });

            modelBuilder.Entity("Iptv.Core.ChannelCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChannelCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kategorija filmskih kanala",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Filmski kanali",
                            OrderNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kategorija sportskih kanala",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sportski kanali",
                            OrderNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kategorija muzičkih kanala",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Muzicki kanali",
                            OrderNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kategorija dokumentarnih kanala",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dokumentarni kanali",
                            OrderNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kategorija dječijih kanala",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Djeciji kanali",
                            OrderNumber = 5
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kategorija informativnih kanala",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Informativni kanali",
                            OrderNumber = 6
                        });
                });

            modelBuilder.Entity("Iptv.Core.ChannelLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChannelLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CultureName = "bs-BA",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bosanski"
                        },
                        new
                        {
                            Id = 2,
                            CultureName = "en-US",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Engleski"
                        });
                });

            modelBuilder.Entity("Iptv.Core.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "MO",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "SA",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "JC",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Jajce"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "TZ",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "ZG",
                            CountryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zagreb"
                        });
                });

            modelBuilder.Entity("Iptv.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "BiH",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "HR",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "SRB",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Srbija"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "CG",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "MKD",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Makedonija"
                        });
                });

            modelBuilder.Entity("Iptv.Core.DailyPackageRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTimeFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTimeTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DailyPackageRequests");
                });

            modelBuilder.Entity("Iptv.Core.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Iptv.Core.DevicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PackageId");

                    b.ToTable("DevicePackages");
                });

            modelBuilder.Entity("Iptv.Core.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("Iptv.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1077),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1084),
                            IsDeleted = false,
                            Name = "O/1/2025",
                            Note = "Prva narudžbina za Basic paket.",
                            PackageId = 1,
                            Price = 9.99m,
                            Status = 4,
                            TotalPrice = 9.99m,
                            Type = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1095),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1097),
                            Discount = 1.50m,
                            IsDeleted = false,
                            Name = "O/2/2025",
                            Note = "Narudžbina za Sportski paket sa popustom.",
                            PackageId = 2,
                            Price = 14.99m,
                            Status = 5,
                            TotalPrice = 13.49m,
                            Type = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1103),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1105),
                            Discount = 5m,
                            IsDeleted = false,
                            Name = "O/3/2025",
                            Note = "Obnova Premium paketa.",
                            PackageId = 3,
                            Price = 29.99m,
                            Status = 4,
                            TotalPrice = 24.99m,
                            Type = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1110),
                            DateTo = new DateTime(2025, 8, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1112),
                            Discount = 2m,
                            IsDeleted = false,
                            Name = "O/4/2025",
                            Note = "Nov user sa Family paketom.",
                            PackageId = 4,
                            Price = 20m,
                            Status = 3,
                            TotalPrice = 18m,
                            Type = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1122),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1124),
                            Discount = 6m,
                            IsDeleted = false,
                            Name = "O/5/2025",
                            Note = "Exclusive paket sa 15% popusta.",
                            PackageId = 5,
                            Price = 39.99m,
                            Status = 4,
                            TotalPrice = 33.99m,
                            Type = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1129),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1131),
                            IsDeleted = false,
                            Name = "O/6/2025",
                            Note = "Narudžbina za Basic paket.",
                            PackageId = 1,
                            Price = 9.99m,
                            Status = 5,
                            TotalPrice = 9.99m,
                            Type = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1137),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1139),
                            Discount = 5m,
                            IsDeleted = false,
                            Name = "O/7/2025",
                            Note = "Narudžbina za Premium paket sa popustom.",
                            PackageId = 3,
                            Price = 29.99m,
                            Status = 5,
                            TotalPrice = 24.99m,
                            Type = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1144),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1146),
                            IsDeleted = false,
                            Name = "O/8/2025",
                            Note = "Narudžbina za Sportski paket.",
                            PackageId = 2,
                            Price = 14.99m,
                            Status = 4,
                            TotalPrice = 14.99m,
                            Type = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1151),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1153),
                            Discount = 4m,
                            IsDeleted = false,
                            Name = "O/9/2025",
                            Note = "Exclusive paket sa 10% popusta.",
                            PackageId = 5,
                            Price = 39.99m,
                            Status = 5,
                            TotalPrice = 35.99m,
                            Type = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFrom = new DateTime(2025, 2, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1158),
                            DateTo = new DateTime(2025, 3, 28, 21, 52, 19, 468, DateTimeKind.Local).AddTicks(1160),
                            Discount = 2m,
                            IsDeleted = false,
                            Name = "O/10/2025",
                            Note = "Narudžbina za Family paket.",
                            PackageId = 4,
                            Price = 20m,
                            Status = 4,
                            TotalPrice = 18m,
                            Type = 1,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Iptv.Core.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPromotional")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("RequiresSubscription")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedById = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Osnovni paket sa nekoliko osnovnih kanala.",
                            IconUrl = "",
                            IsDeleted = false,
                            IsPromotional = false,
                            Name = "Basic Paket",
                            Price = 9.99m,
                            RequiresSubscription = true,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedById = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paket sa sportskim kanalima i HD prenosima.",
                            Discount = 10m,
                            IconUrl = "",
                            IsDeleted = false,
                            IsPromotional = false,
                            Name = "Sportski Paket",
                            Price = 14.99m,
                            RequiresSubscription = true,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            CreatedById = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paket sa premium kanalima i ekskluzivnim sadržajem.",
                            Discount = 20m,
                            IconUrl = "",
                            IsDeleted = false,
                            IsPromotional = true,
                            Name = "Premium Paket",
                            Price = 29.99m,
                            RequiresSubscription = true,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 3,
                            CreatedById = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paket sa kanalima za celu porodicu.",
                            IconUrl = "",
                            IsDeleted = false,
                            IsPromotional = false,
                            Name = "Family Paket",
                            Price = 19.99m,
                            RequiresSubscription = true,
                            Status = 2
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            CreatedById = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paket sa ekskluzivnim kanalima i sadržajem.",
                            Discount = 15m,
                            IconUrl = "",
                            IsDeleted = false,
                            IsPromotional = false,
                            Name = "Exclusive Paket",
                            Price = 39.99m,
                            RequiresSubscription = true,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            CreatedById = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Promotivni paket za prazničnu sezonu sa besplatnim sadržajem.",
                            IconUrl = "",
                            IsDeleted = false,
                            IsPromotional = true,
                            Name = "Holiday Paket",
                            Price = 4.99m,
                            RequiresSubscription = false,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Iptv.Core.PackageChannelCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelCategoryId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageChannelCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChannelCategoryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChannelCategoryId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 1
                        },
                        new
                        {
                            Id = 3,
                            ChannelCategoryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 2
                        },
                        new
                        {
                            Id = 4,
                            ChannelCategoryId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 2
                        },
                        new
                        {
                            Id = 5,
                            ChannelCategoryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 3
                        },
                        new
                        {
                            Id = 6,
                            ChannelCategoryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 3
                        },
                        new
                        {
                            Id = 7,
                            ChannelCategoryId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 3
                        },
                        new
                        {
                            Id = 8,
                            ChannelCategoryId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 3
                        },
                        new
                        {
                            Id = 9,
                            ChannelCategoryId = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 3
                        },
                        new
                        {
                            Id = 10,
                            ChannelCategoryId = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 4
                        },
                        new
                        {
                            Id = 11,
                            ChannelCategoryId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 4
                        },
                        new
                        {
                            Id = 12,
                            ChannelCategoryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 5
                        },
                        new
                        {
                            Id = 13,
                            ChannelCategoryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 5
                        },
                        new
                        {
                            Id = 14,
                            ChannelCategoryId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 5
                        },
                        new
                        {
                            Id = 15,
                            ChannelCategoryId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 6
                        },
                        new
                        {
                            Id = 16,
                            ChannelCategoryId = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PackageId = 6
                        });
                });

            modelBuilder.Entity("Iptv.Core.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Iptv.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "143bbe2f-30ab-47de-a06a-a19cc8d61d69",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            RoleLevel = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "0bcd43dd-aa70-4aae-912f-50f4efc8c245",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Client",
                            NormalizedName = "CLIENT",
                            RoleLevel = 2
                        });
                });

            modelBuilder.Entity("Iptv.Core.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Iptv.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoThumbnail")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("VerificationSent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1999, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ed987857-dc91-41f5-9a9a-176f0fe77e9c",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "site.admin@exyutv.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SITE.ADMIN@EXYUTV.COM",
                            NormalizedUserName = "SITE.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "site.admin",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1999, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6853bac4-0d5e-4897-8a65-f9f022771f22",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Inas",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "Bajraktarević",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@MAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client1",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1979, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d3ebc124-d900-4579-8d67-fff78c9c66cb",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "2",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@MAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client2",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1989, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f6366a87-4cbb-4bb3-955e-ba8790cc2bb7",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "3",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT3@MAIL.COM",
                            NormalizedUserName = "CLIENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client3",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(2005, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "15caa726-1707-4a7b-8729-47907f44f000",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client4@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "4",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT4@MAIL.COM",
                            NormalizedUserName = "CLIENT4",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client4",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3c1bfd59-86e8-4144-b7ba-b8936523fb9e",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client5@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "5",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT5@MAIL.COM",
                            NormalizedUserName = "CLIENT5",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client5",
                            VerificationSent = false
                        });
                });

            modelBuilder.Entity("Iptv.Core.UserChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLike")
                        .HasColumnType("boolean");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserChannels");
                });

            modelBuilder.Entity("Iptv.Core.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Iptv.Core.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("Iptv.Core.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Iptv.Core.UserPackageRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPackageRequests");
                });

            modelBuilder.Entity("Iptv.Core.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Iptv.Core.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Iptv.Core.ActivityLog", b =>
                {
                    b.HasOne("Iptv.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iptv.Core.Channel", b =>
                {
                    b.HasOne("Iptv.Core.ChannelCategory", "ChannelCategory")
                        .WithMany("Channels")
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.ChannelLanguage", "ChannelLanguage")
                        .WithMany()
                        .HasForeignKey("ChannelLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelCategory");

                    b.Navigation("ChannelLanguage");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Iptv.Core.City", b =>
                {
                    b.HasOne("Iptv.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Iptv.Core.DailyPackageRequest", b =>
                {
                    b.HasOne("Iptv.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Iptv.Core.Device", b =>
                {
                    b.HasOne("Iptv.Core.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("Iptv.Core.DevicePackage", b =>
                {
                    b.HasOne("Iptv.Core.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.Package", "Package")
                        .WithMany("AvailableDevices")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Iptv.Core.Order", b =>
                {
                    b.HasOne("Iptv.Core.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iptv.Core.Package", b =>
                {
                    b.HasOne("Iptv.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Iptv.Core.PackageChannelCategory", b =>
                {
                    b.HasOne("Iptv.Core.ChannelCategory", "ChannelCategory")
                        .WithMany()
                        .HasForeignKey("ChannelCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.Package", null)
                        .WithMany("ChannelCategories")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelCategory");
                });

            modelBuilder.Entity("Iptv.Core.Payment", b =>
                {
                    b.HasOne("Iptv.Core.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iptv.Core.RoleClaim", b =>
                {
                    b.HasOne("Iptv.Core.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iptv.Core.UserChannel", b =>
                {
                    b.HasOne("Iptv.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iptv.Core.UserClaim", b =>
                {
                    b.HasOne("Iptv.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iptv.Core.UserDevice", b =>
                {
                    b.HasOne("Iptv.Core.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iptv.Core.UserLogin", b =>
                {
                    b.HasOne("Iptv.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iptv.Core.UserPackageRequest", b =>
                {
                    b.HasOne("Iptv.Core.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iptv.Core.UserRole", b =>
                {
                    b.HasOne("Iptv.Core.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iptv.Core.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iptv.Core.UserToken", b =>
                {
                    b.HasOne("Iptv.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iptv.Core.ChannelCategory", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("Iptv.Core.Package", b =>
                {
                    b.Navigation("AvailableDevices");

                    b.Navigation("ChannelCategories");
                });

            modelBuilder.Entity("Iptv.Core.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Iptv.Core.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
